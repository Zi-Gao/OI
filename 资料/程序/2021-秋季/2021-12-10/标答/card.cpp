/*
如果翻牌操作进行了奇数次，则最后是正面朝上；如果进行了偶数
次，则最后是背面朝上。也就是说，这个问题等价于"寻找被翻转次数
为偶数的牌"。而翻牌操作的时机则是"翻牌间隔数字是这个数的约数
时"，因此也就相当于寻找拥有偶数个"1 以外的约数"的数字。
举个例子，12 的约数是"1、2、3、4、6、12"这 6 个，也就是偶数
个。把约数由小到大排列，并将两端的数按顺序相乘就可以得到原数。
例）1×12, 2×6, 3×4
不过 16 的约数是"1、2、4、8、16"这 5 个，也就是奇数个。我们把
约数从小到大排列，并将两端的数按顺序相乘后，会剩下正中间的
数字 4。( 1 ×16, 2 ×8 )
※ 剩下的数字乘以自身就可以得到原数（4 ×4＝ 16）
也就是说，只有当牌面数字是平方数的时候约数才是奇数个，也就
是除 1 以外的约数是偶数个了,这样找到规律后，代码就不会超时。 
*/ 

#include <iostream>
#include <cstdio>
using namespace std;

int main(){
	freopen("card.in", "r", stdin);
	freopen("card.out", "w", stdout);
	int n, cnt = 0;
	cin >> n;
	for(int i = 1; i * i <= n; i++){
       cnt++;
	}	
	cout << cnt;
	fclose(stdin);
	fclose(stdout);
	return 0;
}
